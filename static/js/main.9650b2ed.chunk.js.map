{"version":3,"sources":["components/Flashcard.jsx","components/Newcard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Flashcard","jap","eng","cards","onDelete","flip","visiable","onClick","japanese","className","id","Newcard","engInput","japaneseInput","engChange","japChange","htmlFor","name","value","onChange","App","shuffleArray","array","t","i","arrayCopy","slice","m","length","Math","floor","random","useState","window","localStorage","getItem","setItem","JSON","stringify","parse","allCards","setAllCards","randomizedCards","setRandomizedCards","setJapaneseInput","setEngInput","setFlip","isVisiable","setIsVisiable","allCardsCopy","randomizedCardsCopy","removedObject","shift","splice","deleteFlashcard","shiftCorrectAnswer","push","pushAndShiftWrongAnswer","event","target","newFlashcard","pushNewFlashcardToCardsArrayAndUpdateLocalStorage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAyBeA,EAxBG,SAAC,GAAiD,IAE9DC,EAAKC,EAFSC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAWC,EAAa,EAAbA,QAOpD,OAHAN,EAAME,EAAM,GAAGK,SACfN,EAAMC,EAAM,GAAID,IAGd,sBAAKO,UAAU,OAAf,UACE,wBAAQA,UAAU,SAASF,QAASH,EAApC,oBACA,qBAAKG,QAASA,EAASE,UAAU,YAAjC,SACE,sBAAKA,UAAU,kBAAkBC,GAAIL,EAArC,UACE,qBAAKI,UAAU,kBAAf,SACE,6BAAKR,MAEP,qBAAKQ,UAAU,iBAAf,SACE,oBAAIC,GAAIJ,EAAR,SAAoBJ,eCFjBS,EAdC,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,UAAWR,EAAa,EAAbA,QAC/D,OAEE,sBAAKE,UAAU,OAAf,UACE,uBAAOO,QAAQ,WAAf,sBACA,0BAAUC,KAAK,WAAWP,GAAG,MAAMQ,MAAOL,EAAeM,SAAUJ,IACnE,uBAAOC,QAAQ,UAAf,qBACA,0BAAUC,KAAK,UAAUP,GAAG,MAAMQ,MAAON,EAAUO,SAAUL,IAC7D,wBAAQP,QAASA,EAAjB,+BC+KSa,MAlLf,WAGE,IAkCMC,EAAe,SAACC,GAMpB,IAJA,IAE0BC,EAAGC,EAFzBC,EAAYH,EAAMI,QAElBC,EAAIF,EAAUG,OAEZD,GACJH,EAAIK,KAAKC,MAAMD,KAAKE,SAAWJ,KAE/BJ,EAAIE,EAAUE,GACdF,EAAUE,GAAKF,EAAUD,GACzBC,EAAUD,GAAKD,EAGjB,OAAOE,GAnDI,EAiImBO,oBArGwB,OAAnDC,OAAOC,aAAaC,QAAQ,oBAC7BF,OAAOC,aAAaE,QAAQ,kBALvBC,KAAKC,UAnBD,CACT,CACE9B,SAAU,yDACVN,IAAK,gBAEP,CACEM,SAAU,iCACVN,IAAK,0BAEP,CACEM,SAAU,iCACVN,IAAK,gBAEP,CACEM,SAAU,+DACVN,IAAK,0BAWAmC,KAAKE,MAAMN,OAAOC,aAAaC,QAAQ,sBA/BrC,mBAiINK,EAjIM,KAiIIC,EAjIJ,OAmIiCT,mBAASX,EAAamB,IAnIvD,mBAmINE,EAnIM,KAmIWC,EAnIX,OAqI6BX,mBAAS,IArItC,mBAqINnB,EArIM,KAqIS+B,EArIT,OAsImBZ,mBAAS,IAtI5B,mBAsINpB,EAtIM,KAsIIiC,EAtIJ,OAwIWb,mBAAS,IAxIpB,mBAwIN3B,EAxIM,KAwIAyC,EAxIA,OAyIuBd,mBAAS,IAzIhC,mBAyINe,EAzIM,KAyIMC,EAzIN,KA8Ib,MAlEmC,qBAAvBN,EAAgB,IACxBC,EAAmBtB,EAAamB,IAkElC,sBAAK/B,UAAU,MAAf,UACE,gCACE,cAAC,EAAD,CACEN,MAAOuC,EACPtC,SAAU,kBAhDM,WAMtB,IAJA,IAAI6C,EAAeT,EAASd,QACxBwB,EAAsBR,EAAgBhB,QACtCyB,EAAgBD,EAAoBE,QAEhC5B,EAAI,EAAGA,EAAIyB,EAAarB,OAAQJ,IACnCyB,EAAazB,GAAGtB,MAAQiD,EAAcjD,KAAO+C,EAAarB,OAAS,GACpEqB,EAAaI,OAAO7B,EAAG,GAI3BiB,EAAYQ,GACZN,EAAmBO,GAEnBjB,OAAOC,aAAaE,QAAQ,WAAYC,KAAKC,UAAUW,IAiCjCK,IAChBjD,KAAMA,EACNC,SAAUyC,EACVxC,QAAS,WA/BH,KAATF,GACD2C,EAAc,IACdF,EAAQ,UAERE,EAAc,cACdF,EAAQ,QA4BN,sBAAKrC,UAAU,sBAAf,UACE,wBACEA,UAAU,UACVF,QAAS,kBAAMoC,EApGE,SAACrB,GACd,SAATjB,IACD2C,EAAc,cACdF,EAAQ,KAEV,IAAIrB,EAAYH,EAAMI,QAEtB,OADAD,EAAU2B,QACH3B,EA6FmC8B,CAAmBb,KAFvD,4BAMA,wBACEjC,UAAU,YACVF,QAAS,kBAAMoC,EAhGO,SAACrB,GACnB,SAATjB,IACD2C,EAAc,cACdF,EAAQ,KAEV,IAAIrB,EAAYH,EAAMI,QAEtB,OADAD,EAAU+B,KAAK/B,EAAU2B,SAClB3B,EAyFmCgC,CAAwBf,KAF5D,kCAQJ,cAAC,EAAD,CACE9B,SAAUA,EACVC,cAAeA,EACfC,UAAW,SAAA4C,GAAK,OAAIb,EAAYa,EAAMC,OAAOzC,QAC7CH,UAAW,SAAA2C,GAAK,OAAId,EAAiBc,EAAMC,OAAOzC,QAClDX,QAAS,kBA3F2C,WACxD,IAAIqD,EAAe,GAEnBA,EAAapD,SAAWK,EACxB+C,EAAa1D,IAAMU,EAEnBgC,EAAiB,IACjBC,EAAY,IAEZ,IAAII,EAAeT,EAASd,QAC5BuB,EAAaO,KAAKI,GAElBnB,EAAYQ,GACZN,EAAmBtB,EAAa4B,IAEhChB,OAAOC,aAAaE,QAAQ,kBAAmBC,KAAKC,UAAUW,IA4E3CY,UCtKRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9650b2ed.chunk.js","sourcesContent":["\r\nconst Flashcard = ({cards, onDelete, flip, visiable,  onClick}) => {\r\n\r\n  var jap, eng;\r\n\r\n  jap = cards[0].japanese;\r\n  eng = cards[0]. eng;\r\n  \r\n  return (\r\n    <div className='card'>\r\n      <button className='delete' onClick={onDelete} >Delete</button>\r\n      <div onClick={onClick} className=\"flip-card\" >\r\n        <div className=\"flip-card-inner\" id={flip}>\r\n          <div className=\"flip-card-front\">\r\n            <h2>{jap}</h2>\r\n          </div>\r\n          <div className=\"flip-card-back\">\r\n            <h2 id={visiable} >{eng}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Flashcard\r\n","\r\nconst Newcard = ({engInput, japaneseInput, engChange, japChange, onClick}) => {\r\n  return (\r\n\r\n    <div className='form'>\r\n      <label htmlFor='japanese' >Japanese</label>\r\n      <textarea name=\"japanese\" id=\"jap\" value={japaneseInput} onChange={japChange} ></textarea>\r\n      <label htmlFor=\"english\">English</label>\r\n      <textarea name=\"english\" id=\"eng\" value={engInput} onChange={engChange} ></textarea>\r\n      <button onClick={onClick} >Make New Card</button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Newcard\r\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport Flashcard from './components/Flashcard';\nimport Newcard from './components/Newcard';\n\nfunction App() {\n\n  //FUNCTIONS\n  const makeNewlocalStorageObject = () => {\n\n    var Data = [\n      {\n        japanese: 'おはようございます',\n        eng: 'Good Morning'\n      },\n      {\n        japanese: 'こんにちは',\n        eng: 'Hello / Good Afternoon'\n      },\n      {\n        japanese: 'こんばんは',\n        eng: 'Good Evening'\n      },\n      {\n        japanese: 'ありがとうございます',\n        eng: 'Thank you very much'\n      },\n    ]\n\n    return JSON.stringify(Data);\n  };\n\n  const returnDataObjectIfExistsOrCreateDataObjectIfNot = () => {\n    if(window.localStorage.getItem('usersFlashcards') === null) {\n      window.localStorage.setItem('usersFlashcards', makeNewlocalStorageObject());\n    } else {\n      return JSON.parse(window.localStorage.getItem('usersFlashcards'));\n    }\n\n    return JSON.parse(window.localStorage.getItem('usersFlashcards'));\n  };\n\n  const shuffleArray = (array) => {\n\n    var arrayCopy = array.slice();\n\n    var m = arrayCopy.length, t, i;\n\n    while(m) {\n      i = Math.floor(Math.random() * m--);\n\n      t = arrayCopy[m];\n      arrayCopy[m] = arrayCopy[i];\n      arrayCopy[i] = t;\n    }\n\n    return arrayCopy\n\n  }\n\n  const shiftCorrectAnswer = (array) => {\n    if(flip === 'flip') {\n      setIsVisiable('invisiable');\n      setFlip('');\n    }\n    var arrayCopy = array.slice();\n    arrayCopy.shift();\n    return arrayCopy;\n  }\n\n  const pushAndShiftWrongAnswer = (array) => {\n    if(flip === 'flip') {\n      setIsVisiable('invisiable');\n      setFlip('');\n    }\n    var arrayCopy = array.slice();\n    arrayCopy.push(arrayCopy.shift());\n    return arrayCopy;\n  }\n\n  const resetRandomCardsState = () => {\n    if(typeof randomizedCards[0] === 'undefined') {\n      setRandomizedCards(shuffleArray(allCards));\n    }\n  }\n\n  const pushNewFlashcardToCardsArrayAndUpdateLocalStorage = () => {\n    var newFlashcard = {};\n\n    newFlashcard.japanese = japaneseInput;\n    newFlashcard.eng = engInput;\n\n    setJapaneseInput('');\n    setEngInput('');\n\n    var allCardsCopy = allCards.slice();\n    allCardsCopy.push(newFlashcard);\n\n    setAllCards(allCardsCopy);\n    setRandomizedCards(shuffleArray(allCardsCopy));\n\n    window.localStorage.setItem('usersFlashcards', JSON.stringify(allCardsCopy));\n  }\n\n  const deleteFlashcard = () => {\n\n    var allCardsCopy = allCards.slice();\n    var randomizedCardsCopy = randomizedCards.slice();\n    var removedObject = randomizedCardsCopy.shift();\n\n    for(var i = 0; i < allCardsCopy.length; i++) {\n      if(allCardsCopy[i].eng === removedObject.eng && allCardsCopy.length > 1) {\n        allCardsCopy.splice(i, 1);\n      }\n    }\n\n    setAllCards(allCardsCopy);\n    setRandomizedCards(randomizedCardsCopy);\n\n    window.localStorage.setItem('userData', JSON.stringify(allCardsCopy));\n\n  }\n\n  const handleSetFlip = () => {\n    if(flip === '') {\n      setIsVisiable('');\n      setFlip('flip');\n    } else {\n      setIsVisiable('invisiable');\n      setFlip('');\n    }\n  }\n\n  //STATES\n  const [allCards, setAllCards] = useState(returnDataObjectIfExistsOrCreateDataObjectIfNot())\n\n  const [randomizedCards, setRandomizedCards] = useState(shuffleArray(allCards))\n\n  const [japaneseInput, setJapaneseInput] = useState('');\n  const [engInput, setEngInput] = useState('');\n\n  const [flip, setFlip] = useState('');\n  const [isVisiable, setIsVisiable] = useState('');\n\n  //catching if the cards array is empty and reseting it\n  resetRandomCardsState();\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Flashcard \n          cards={randomizedCards} \n          onDelete={() => deleteFlashcard()} \n          flip={flip}\n          visiable={isVisiable}\n          onClick={() => handleSetFlip()} \n        />\n        <div className=\"right-wrong-buttons\">\n          <button\n            className='correct'\n            onClick={() => setRandomizedCards(shiftCorrectAnswer(randomizedCards))}\n          >\n            I got it right\n          </button>\n          <button\n            className='incorrect'\n            onClick={() => setRandomizedCards(pushAndShiftWrongAnswer(randomizedCards))}\n          >\n            I got it wrong\n          </button>\n        </div>\n      </div>\n      <Newcard \n        engInput={engInput} \n        japaneseInput={japaneseInput} \n        engChange={event => setEngInput(event.target.value)}\n        japChange={event => setJapaneseInput(event.target.value)}\n        onClick={() => pushNewFlashcardToCardsArrayAndUpdateLocalStorage()}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}